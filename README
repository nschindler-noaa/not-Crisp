This file is intended to provide pointers to "where to find it, how to build
it, and how it works". This is not complete documentation for CRiSP, but it
will hopefully give an engineer a head start towards finding out where
things are.

Matt Moore, 7 July 2000

Update: 15th of July, 2005

I'm updating this file since I just cleaned up the CRiSP source code for
insertion into source control.

The CRiSP GUI now uses the Qt library from Trolltech (currently using version
3.3.3) instead of RogueWave/ZApp. I didn't work on the majority of the port,
but from my experience with the code, it appears to be very similar to the
ZApp version, so much of the original README still applies (see below). The
help system and the log window, however, appear to be much more closely tied
to Qt and share little code with the older version. qHelpWindow didn't even
exist in the old version, actually.

Qt uses a special preprocessor for its signal handling that generates MOC
files, e.g. moc_qSomeClass.cpp. Additionally, some of the interface has been
generated using Trolltech's RAD tool, Qt Designer. These .ui files are
converted to C++ source code using uic (as in the Makefile).

The help files, which are present in the help/ directory are currently being
built directly into the GUI executable using a fairly standard procedure to
convert a binary file into a C character array (see help_index.sh, bin2c.c,
Makefile, and qHelpWindow.cpp for more information). There is a simple table
of contents file (help/crisp.toc) in an XML format that sets up the sections
for the tree view in the help viewer. The TOC format is described in
qHelpWindow.cpp (a notable point is that the <keyword> sections are actually
not used, at the moment).

The UNIX build process (see Makefile) should be able to regenerate all
necessary files to compile the application (i.e. convert .ui files to their
C++ source and header files, create moc_*.cpp files, and compile the help/
files properly).

The build process for Windows is basically just whatever you can get to work.
At the moment, I am not planning on checking it into source control because
it stores a large amount of information unrelated to coding. Other Windows-
related source is probably accessible somewhere else, but I'm not sure where
that will be yet. The installer for Windows is probably going to be redone
and if you're the one who has to do it, I suggest you use Inno Setup since
I tried it and it looks easy. I investigated the Windows XML installer, but
it is much too complicated for our needs and requires updates upon every
single source code change.

At the moment, the GUI version is created as "crisp1" and the batch version
(which only uses C code and no help files) is compiled to "crisp1b". Note that
bin2c.c is a tool for compiling help files and should NOT be part of crisp1b.

If you're wondering where all the images went, they're probably inside of the
source files as XPM images (an image format that was designed to be easily
inserted into C code). The remaining images are in the Qt designer files (*.ui).
As such, I made the decision to not include the source image files (I believe
they are in BMP format) in source control.

There are a fair number of artifacts left from older versions of the GUI code,
unfortunately. Namely, the event handling is rather roundabout (it is based on
Qt's slots and signals, but is also based on NOT using Qt's facilities) and
there are many instances of lock variables being used to prevent infinite loops
(as opposed to just calling the correct functions in the correct order). On the
plus side, most of the issues can be safely ignored (or at least, that's what I
did) and the code does, indeed work.

The original copy of this file describe the structure of the code fairly
accurately as far as this new Qt version is concerned. The build processes and
such are completely out of date, however, so please ignore those parts.

The original contents of this README follow (unmodified since 7/7/2000):
___________________________________________--

CRiSP requires the RogueWave basic libraries and ZApp libraries to be
installed and working. Once that is in place, you can build crisp by typing
"make debug" or "make release" in the /proj/crisp/z_obj directory. If you
change from debug to release, be sure to delete all the object files,
.make.state, and the Templates.DB directory - this ensures that all objects
get recompiled and you have a completely debug, or completely retail, version.
If you neglect to delete all of that you may end up with a partially rebuilt
program - half man, half beast.

CRiSP on the PC is a Microsoft Visual C++ 6.0 project. The project files
are in /proj2/crisp/pc_proj and should be ftp-ed to a PC in binary mode.
They expect the source files in c:\workshop\crisp1\src

Packaging the release software is easy on the Unix side: look in the Makefile
under the install target and see how it is done. Basically the project is
rebuilt and the release files are copied to /proj/crisp/z_bin and then a
tar file is made. It would also be OK to assemble a directory tree of the
release executable and data files and tar / gzip it manually.

Packaging the release version on the PC side is harder, currently, because
it uses InstallShield 5.0 (a freeware version of Installshield - this is
software that tries to make installation on Windows painless). There is a zip
file of the current installation files (a huge lot of them) in
/proj2/crisp/pc_install. These would have to be unzipped on a PC and 
Installshield installed. This probably isn't necessary, since all it gets
us over and above simply using WinZip is that a crisp icon gets added to the
Start menu. It would be quite simple to assemble the release software in a
directory on a PC and just use WinZip to package it into a self-unpacking
archive. The user could then unpack it and drag a link to crisp1.exe to his
desktop.

___________________________________________

Internals: these are unedited ruminations about how the CRiSP program works
internally.

ZApp is a collection of C++ class libraries from RogueWave Inc. It provides
classes that can be linked to on Windows or Solaris to provide GUI functions.
The idea is that the application code is written once and compiled twice, so
you get two apps for the price of one. Really we got two apps for the price
of 1.5, but still it was probably a good decision to make at the time (before
my time). Unfortunately, RogueWave discontinued ZApp and orphaned us. The
current ZApp version is the last one and they are not even supporting it any
more. RogueWave now says that cross-platform GUI apps should be written in
Java. The adult model is in fact written that way, and there was a plan to
migrate the juvenile model to the same format (in fact, my plan was to make
a single model for juveniles and adults, using the same physical river
simulation and GUI software: if you define juvenile releases they run
downstream, if you define adult cohorts they run upstream, if you define
both they wave as they pass each other). That never happened because Jim
didn't see the necessity, but sooner or later it will be necessary so don't
do anything that prevents it.

We also use the RogueWave tools, math, and standard c++ libraries. These
are useful and so far, seem to be on solid ground support-wise. All of this
is found under /usr/local/rwav on Solaris and under c:\rwav on the PC. The
RogueWave software is installed and supported by "Software Parts Manager",
a GUI-based smart installer / configuration manager. The RogueWave web site
tells you about it.

The crisp application is really two applications: a ZApp-based program that
can run interactively or in batch mode, depending on command-line options,
and a batch-mode only program which is linked without the ZApp libraries.
They are named crisp1 and crisp1bat respectively (crisp1.exe on the PC: there
is no batch-mode only version on the PC although there could be easily enough).

The GUI version starts in zApp::main() in c1main.cpp. C1Main is the class for
the main application window and the constructor for C1Main constructs a main
window, menu, and tool bars as well as creating the map interaction handling
classes. C1Main::SetUpMenu() creates the main app window's menu. Notice that
menu item values are assigned dynamically for menu items that select
particular river features.


C1Main::command() is where the menu item picks come in. For dynamically
assigned menu item values, the actual river feature being referenced must
be calculated. Most menu items create an object which eventually displays
a dialog of some kind. However, there are exceptions - reading the code
is still important.

The Run command is interesting. ID_SCE causes a second process to be launched
(this is so that the GUI can maintain control and listen for the Cancel
button). A zTimer object is also created, which will call-back the main task
periodically and allow the main task to detect whether the processing task
has finished. This is done indirectly so that it will be more portable between
operating systems.

Events are interesting. implicit.h defines a general event mechanism. An event
is an object that can be signalled, and that other objects can register with
to receive notification when the event has been signaled. For one example,
when the run process starts or stops, the global object GERunStatusChanged_
is notified. All dialogs which modify inputs listen to this event, and forbid
changes to input parameters while the simulation is running. All dialogs which
display simulation results also listen to this event, and clear their caches
and refresh their displays whenever run status changes. Events are also used
to coordinate the input editing dialogs: recall that several input editing
dialogs can be displaying the same input values, and changes in any one are
relected in the others. This is accomplished by signalling an event whenever
one of the dialogs changes an input value: the other dialogs are listening
to that event and clear their caches when they hear it, thereby redisplaying
the updated values.

The "interface data controller" is an interesting concept. Each type of input
data that is GUI-editable has an IDC. Each IDC has exclusive control over
some subset of input data - the migration equations for every stock and
species, for example. Dialogs which want to access or change input data must
negotiate for it with the appropriate IDC, and the IDC maintains and event
which notifies the dialogs when IDC contents have changed. Each IDC also
maintains a cache of "data containers" - displayable data collected from the
underlying database - which needs to be flushed whenever the underlying data
is changed (e.g. by reading a file).

Dialogs (input editors and output graphs) are implemented with the "mediator"
concept (from a book called Design Patterns that Troy liked). This means that
the visible object (the dialog) is associated with an invisible object (the
mediator) and with some other objects (the submediators). The dialog itself
is mainly concerned with displaying things. The mediators are concerned with
getting the data to display (from the IDC for input data, from data tokens
for output data). This design pattern is supposed to have various software
engineering advantages over the product life cycle. I'm not convinced it was
worthwhile, but I inherited it from Troy and from Steve Umbehocker and now
you are inheriting it from me.

___________________________________________



What follows is a brief description of the subdirectories in the crisp
structure. 

crisp/doc:
	Various documents related to crisp1.  See "overview.doc" for a
	general description of the source code.  Files ending in
	".doc" are normal text files; those ending in ".fmdoc" are
	FrameMaker documents.  This is mostly of historical interest.

crisp/bin:
	crisp1 v 1.5.5 released code. Probably vestigial.

crisp/src:
	The source for the core (legacy) code.  Includes full SCCS revision 
	history. All sources in this directory are in C and are concerned
	with core (simulation) functions.

crisp/z_src:
	Source code for the ZApp GUI code. Includes an SCCS directory.
	Almost all sources in this directory are in C++ and are concerned
	with GUI.

crisp/obj:
	Probably vestigial.

crisp/z_obj:
	Object code, makefile, and executable for current development
	version. CRiSP is always built here, executables may be moved to
	other directories if they are more "official" in some way.

crisp/z_bin
	Used as part of the release process. See makefile.

____________________________________________

 These are some notes about ZApp features which work differently on the PC
and Unix, and how I have been able to work around them. These are somewhat
old but still of historical interest. ZApp generally works better on the PC
(where it originated) than on Unix (where it was ported to).

 1) When you create a dialog's child window controls without resources, you
must resize the dialog with the move() function (adding one pixel to the 
width is enough) before the child controls will display properly. Appearently
the sizer logic needs a kick on Unix - on the PC this is not necessary, but
it does no harm.

 2) zMultiList boxes did not work on Unix with the ZApp libraries which
used the Standard Template Library. Without STL they work fine. The proximate
symptom was that the RWTPtrSList<int> needed to return the current selections
threw a page fault when passed to zMultiList::getSelections().

 3) On Unix, group boxes in dialogs must not be nested (the inner one will
not be visible). The PC doesn't care about this.

 4) On Unix, getExterior() doesn't seem to work for child window controls
of dialogs made from templates (top, left is always returned 0, 0).
On the other hand, (zRect)(*(control.sizer())) gives the correct result - 
a zRect with the control's upper left corner, width, and height.

 5) On Unix, the app can only print to a PostScript Level II printer.
The only such printer we have currently is "color" and it is only enabled
from the workstations "teal" and "confocal". So if you run on one of those
machines, and select "color" as the printer, printing works fine. Otherwise,
it doesn't.


